id: http://www.w3.org/ns/prov#
name: prov
description: prov
imports:
- linkml:types
prefixes:
  linkml: https://w3id.org/linkml/
  prov: https://w3id.org/linkml/prov/
default_prefix: prov
types: {}
classes:
  Thing:
    class_uri: owl:Thing
  Activity:
    class_uri: prov:Activity
    slots:
    - atLocation
    - generated
    - invalidated
    - qualifiedAssociation
    - qualifiedCommunication
    - qualifiedEnd
    - qualifiedInfluence
    - qualifiedStart
    - qualifiedUsage
    - used
    - wasAssociatedWith
    - wasEndedBy
    - wasInfluencedBy
    - wasInformedBy
    - wasStartedBy
    - endedAtTime
    - startedAtTime
    description: An activity is something that occurs over a period of time and acts
      upon or with entities; it may include consuming, processing, transforming, modifying,
      relocating, using, or generating entities.
  ActivityInfluence:
    class_uri: prov:ActivityInfluence
    slots:
    - activity
    is_a: Influence
    comments:
    - ActivityInfluence provides additional descriptions of an Activity's binary influence
      upon any other kind of resource. Instances of ActivityInfluence use the prov:activity
      property to cite the influencing Activity.@en
    - It is not recommended that the type ActivityInfluence be asserted without also
      asserting one of its more specific subclasses.@en
  Agent:
    class_uri: prov:Agent
    slots:
    - actedOnBehalfOf
    - atLocation
    - qualifiedDelegation
    - qualifiedInfluence
    - wasInfluencedBy
    description: An agent is something that bears some form of responsibility for
      an activity taking place, for the existence of an entity, or for another agent's
      activity. @en
  AgentInfluence:
    class_uri: prov:AgentInfluence
    slots:
    - agent
    is_a: Influence
    comments:
    - AgentInfluence provides additional descriptions of an Agent's binary influence
      upon any other kind of resource. Instances of AgentInfluence use the prov:agent
      property to cite the influencing Agent.@en
    - It is not recommended that the type AgentInfluence be asserted without also
      asserting one of its more specific subclasses.@en
  Association:
    class_uri: prov:Association
    slots:
    - hadPlan
    - hadRole
    is_a: AgentInfluence
    comments:
    - An instance of prov:Association provides additional descriptions about the binary
      prov:wasAssociatedWith relation from an prov:Activity to some prov:Agent that
      had some responsiblity for it. For example, :baking prov:wasAssociatedWith :baker;
      prov:qualifiedAssociation [ a prov:Association; prov:agent :baker; :foo :bar
      ].@en
    description: An activity association is an assignment of responsibility to an
      agent for an activity, indicating that the agent had a role in the activity.
      It further allows for a plan to be specified, which is the plan intended by
      the agent to achieve some goals in the context of this activity.@en
  Attribution:
    class_uri: prov:Attribution
    is_a: AgentInfluence
    comments:
    - An instance of prov:Attribution provides additional descriptions about the binary
      prov:wasAttributedTo relation from an prov:Entity to some prov:Agent that had
      some responsible for it. For example, :cake prov:wasAttributedTo :baker; prov:qualifiedAttribution
      [ a prov:Attribution; prov:entity :baker; :foo :bar ].@en
    description: 'Attribution is the ascribing of an entity to an agent.


      When an entity e is attributed to agent ag, entity e was generated by some unspecified
      activity that in turn was associated to agent ag. Thus, this relation is useful
      when the activity is not known, or irrelevant.@en'
  Bundle:
    class_uri: prov:Bundle
    is_a: Entity
    comments:
    - Note that there are kinds of bundles (e.g. handwritten letters, audio recordings,
      etc.) that are not expressed in PROV-O, but can be still be described by PROV-O.@en
    description: A bundle is a named set of provenance descriptions, and is itself
      an Entity, so allowing provenance of provenance to be expressed.@en
  Collection:
    class_uri: prov:Collection
    slots:
    - hadMember
    is_a: Entity
    description: A collection is an entity that provides a structure to some constituents,
      which are themselves entities. These constituents are said to be member of the
      collections.@en
  Communication:
    class_uri: prov:Communication
    is_a: ActivityInfluence
    comments:
    - An instance of prov:Communication provides additional descriptions about the
      binary prov:wasInformedBy relation from an informed prov:Activity to the prov:Activity
      that informed it. For example, :you_jumping_off_bridge prov:wasInformedBy :everyone_else_jumping_off_bridge;
      prov:qualifiedCommunication [ a prov:Communication; prov:activity :everyone_else_jumping_off_bridge;
      :foo :bar ].@en
    description: Communication is the exchange of an entity by two activities, one
      activity using the entity generated by the other.
  Delegation:
    class_uri: prov:Delegation
    slots:
    - hadActivity
    is_a: AgentInfluence
    comments:
    - An instance of prov:Delegation provides additional descriptions about the binary
      prov:actedOnBehalfOf relation from a performing prov:Agent to some prov:Agent
      for whom it was performed. For example, :mixing prov:wasAssociatedWith :toddler
      . :toddler prov:actedOnBehalfOf :mother; prov:qualifiedDelegation [ a prov:Delegation;
      prov:entity :mother; :foo :bar ].@en
    description: 'Delegation is the assignment of authority and responsibility to
      an agent (by itself or by another agent) to carry out a specific activity as
      a delegate or representative, while the agent it acts on behalf of retains some
      responsibility for the outcome of the delegated work.


      For example, a student acted on behalf of his supervisor, who acted on behalf
      of the department chair, who acted on behalf of the university; all those agents
      are responsible in some way for the activity that took place but we do not say
      explicitly who bears responsibility and to what degree.@en'
  Derivation:
    class_uri: prov:Derivation
    slots:
    - hadActivity
    - hadGeneration
    - hadUsage
    is_a: EntityInfluence
    comments:
    - An instance of prov:Derivation provides additional descriptions about the binary
      prov:wasDerivedFrom relation from some derived prov:Entity to another prov:Entity
      from which it was derived. For example, :chewed_bubble_gum prov:wasDerivedFrom
      :unwrapped_bubble_gum; prov:qualifiedDerivation [ a prov:Derivation; prov:entity
      :unwrapped_bubble_gum; :foo :bar ].@en
    - The more specific forms of prov:Derivation (i.e., prov:Revision, prov:Quotation,
      prov:PrimarySource) should be asserted if they apply.@en
    description: A derivation is a transformation of an entity into another, an update
      of an entity resulting in a new one, or the construction of a new entity based
      on a pre-existing entity.@en
  EmptyCollection:
    class_uri: prov:EmptyCollection
    is_a: Collection
    description: An empty collection is a collection without members.@en
  End:
    class_uri: prov:End
    slots:
    - hadActivity
    is_a: InstantaneousEvent
    mixins:
    - EntityInfluence
    comments:
    - An instance of prov:End provides additional descriptions about the binary prov:wasEndedBy
      relation from some ended prov:Activity to an prov:Entity that ended it. For
      example, :ball_game prov:wasEndedBy :buzzer; prov:qualifiedEnd [ a prov:End;
      prov:entity :buzzer; :foo :bar; prov:atTime '2012-03-09T08:05:08-05:00'^^xsd:dateTime
      ].@en
    description: End is when an activity is deemed to have been ended by an entity,
      known as trigger. The activity no longer exists after its end. Any usage, generation,
      or invalidation involving an activity precedes the activity's end. An end may
      refer to a trigger entity that terminated the activity, or to an activity, known
      as ender that generated the trigger.@en
  Entity:
    class_uri: prov:Entity
    slots:
    - alternateOf
    - atLocation
    - hadPrimarySource
    - qualifiedAttribution
    - qualifiedDerivation
    - qualifiedGeneration
    - qualifiedInfluence
    - qualifiedInvalidation
    - qualifiedPrimarySource
    - qualifiedQuotation
    - qualifiedRevision
    - specializationOf
    - wasAttributedTo
    - wasDerivedFrom
    - wasGeneratedBy
    - wasInfluencedBy
    - wasInvalidatedBy
    - wasQuotedFrom
    - wasRevisionOf
    - generatedAtTime
    - invalidatedAtTime
    - value
    description: An entity is a physical, digital, conceptual, or other kind of thing
      with some fixed aspects; entities may be real or imaginary. @en
  EntityInfluence:
    class_uri: prov:EntityInfluence
    slots:
    - entity
    is_a: Influence
    comments:
    - EntityInfluence provides additional descriptions of an Entity's binary influence
      upon any other kind of resource. Instances of EntityInfluence use the prov:entity
      property to cite the influencing Entity.@en
    - It is not recommended that the type EntityInfluence be asserted without also
      asserting one of its more specific subclasses.@en
  Generation:
    class_uri: prov:Generation
    is_a: InstantaneousEvent
    mixins:
    - ActivityInfluence
    comments:
    - An instance of prov:Generation provides additional descriptions about the binary
      prov:wasGeneratedBy relation from a generated prov:Entity to the prov:Activity
      that generated it. For example, :cake prov:wasGeneratedBy :baking; prov:qualifiedGeneration
      [ a prov:Generation; prov:activity :baking; :foo :bar ].@en
    description: Generation is the completion of production of a new entity by an
      activity. This entity did not exist before generation and becomes available
      for usage after this generation.@en
  Influence:
    class_uri: prov:Influence
    slots:
    - hadActivity
    - hadRole
    - influencer
    comments:
    - An instance of prov:Influence provides additional descriptions about the binary
      prov:wasInfluencedBy relation from some influenced Activity, Entity, or Agent
      to the influencing Activity, Entity, or Agent. For example, :stomach_ache prov:wasInfluencedBy
      :spoon; prov:qualifiedInfluence [ a prov:Influence; prov:entity :spoon; :foo
      :bar ] . Because prov:Influence is a broad relation, the more specific relations
      (Communication, Delegation, End, etc.) should be used when applicable.@en
    - Because prov:Influence is a broad relation, its most specific subclasses (e.g.
      prov:Communication, prov:Delegation, prov:End, prov:Revision, etc.) should be
      used when applicable.@en
    description: Influence is the capacity of an entity, activity, or agent to have
      an effect on the character, development, or behavior of another by means of
      usage, start, end, generation, invalidation, communication, derivation, attribution,
      association, or delegation.@en
  InstantaneousEvent:
    class_uri: prov:InstantaneousEvent
    slots:
    - atLocation
    - hadRole
    - atTime
    comments:
    - An instantaneous event, or event for short, happens in the world and marks a
      change in the world, in its activities and in its entities. The term 'event'
      is commonly used in process algebra with a similar meaning. Events represent
      communications or interactions; they are assumed to be atomic and instantaneous.@en
    description: The PROV data model is implicitly based on a notion of instantaneous
      events (or just events), that mark transitions in the world. Events include
      generation, usage, or invalidation of entities, as well as starting or ending
      of activities. This notion of event is not first-class in the data model, but
      it is useful for explaining its other concepts and its semantics.@en
  Invalidation:
    class_uri: prov:Invalidation
    is_a: InstantaneousEvent
    mixins:
    - ActivityInfluence
    comments:
    - An instance of prov:Invalidation provides additional descriptions about the
      binary prov:wasInvalidatedBy relation from an invalidated prov:Entity to the
      prov:Activity that invalidated it. For example, :uncracked_egg prov:wasInvalidatedBy
      :baking; prov:qualifiedInvalidation [ a prov:Invalidation; prov:activity :baking;
      :foo :bar ].@en
    description: Invalidation is the start of the destruction, cessation, or expiry
      of an existing entity by an activity. The entity is no longer available for
      use (or further invalidation) after invalidation. Any generation or usage of
      an entity precedes its invalidation.
  Location:
    class_uri: prov:Location
    description: A location can be an identifiable geographic place (ISO 19112), but
      it can also be a non-geographic place such as a directory, row, or column. As
      such, there are numerous ways in which location can be expressed, such as by
      a coordinate, address, landmark, and so forth.@en
  Organization:
    class_uri: prov:Organization
    is_a: Agent
    description: An organization is a social or legal institution such as a company,
      society, etc.
  Person:
    class_uri: prov:Person
    is_a: Agent
    description: Person agents are people.@en
  Plan:
    class_uri: prov:Plan
    is_a: Entity
    comments:
    - 'There exist no prescriptive requirement on the nature of plans, their representation,
      the actions or steps they consist of, or their intended goals. Since plans may
      evolve over time, it may become necessary to track their provenance, so plans
      themselves are entities. Representing the plan explicitly in the provenance
      can be useful for various tasks: for example, to validate the execution as represented
      in the provenance record, to manage expectation failures, or to provide explanations.@en'
    description: A plan is an entity that represents a set of actions or steps intended
      by one or more agents to achieve some goals.
  PrimarySource:
    class_uri: prov:PrimarySource
    is_a: Derivation
    comments:
    - An instance of prov:PrimarySource provides additional descriptions about the
      binary prov:hadPrimarySource relation from some secondary prov:Entity to an
      earlier, primary prov:Entity. For example, :blog prov:hadPrimarySource :newsArticle;
      prov:qualifiedPrimarySource [ a prov:PrimarySource; prov:entity :newsArticle;
      :foo :bar ] .@en
    description: 'A primary source for a topic refers to something produced by some
      agent with direct experience and knowledge about the topic, at the time of the
      topic''s study, without benefit from hindsight.


      Because of the directness of primary sources, they ''speak for themselves''
      in ways that cannot be captured through the filter of secondary sources. As
      such, it is important for secondary sources to reference those primary sources
      from which they were derived, so that their reliability can be investigated.


      A primary source relation is a particular case of derivation of secondary materials
      from their primary sources. It is recognized that the determination of primary
      sources can be up to interpretation, and should be done according to conventions
      accepted within the application''s domain.@en'
  Quotation:
    class_uri: prov:Quotation
    is_a: Derivation
    comments:
    - An instance of prov:Quotation provides additional descriptions about the binary
      prov:wasQuotedFrom relation from some taken prov:Entity from an earlier, larger
      prov:Entity. For example, :here_is_looking_at_you_kid prov:wasQuotedFrom :casablanca_script;
      prov:qualifiedQuotation [ a prov:Quotation; prov:entity :casablanca_script;
      :foo :bar ].@en
    description: A quotation is the repeat of (some or all of) an entity, such as
      text or image, by someone who may or may not be its original author. Quotation
      is a particular case of derivation.@en
  Revision:
    class_uri: prov:Revision
    is_a: Derivation
    comments:
    - An instance of prov:Revision provides additional descriptions about the binary
      prov:wasRevisionOf relation from some newer prov:Entity to an earlier prov:Entity.
      For example, :draft_2 prov:wasRevisionOf :draft_1; prov:qualifiedRevision [
      a prov:Revision; prov:entity :draft_1; :foo :bar ].@en
    description: A revision is a derivation for which the resulting entity is a revised
      version of some original. The implication here is that the resulting entity
      contains substantial content from the original. Revision is a particular case
      of derivation.@en
  Role:
    class_uri: prov:Role
    description: A role is the function of an entity or agent with respect to an activity,
      in the context of a usage, generation, invalidation, association, start, and
      end.@en
  SoftwareAgent:
    class_uri: prov:SoftwareAgent
    is_a: Agent
    description: A software agent is running software.@en
  Start:
    class_uri: prov:Start
    slots:
    - hadActivity
    is_a: InstantaneousEvent
    mixins:
    - EntityInfluence
    comments:
    - An instance of prov:Start provides additional descriptions about the binary
      prov:wasStartedBy relation from some started prov:Activity to an prov:Entity
      that started it. For example, :foot_race prov:wasStartedBy :bang; prov:qualifiedStart
      [ a prov:Start; prov:entity :bang; :foo :bar; prov:atTime '2012-03-09T08:05:08-05:00'^^xsd:dateTime
      ] .@en
    description: Start is when an activity is deemed to have been started by an entity,
      known as trigger. The activity did not exist before its start. Any usage, generation,
      or invalidation involving an activity follows the activity's start. A start
      may refer to a trigger entity that set off the activity, or to an activity,
      known as starter, that generated the trigger.@en
  Usage:
    class_uri: prov:Usage
    is_a: InstantaneousEvent
    mixins:
    - EntityInfluence
    comments:
    - An instance of prov:Usage provides additional descriptions about the binary
      prov:used relation from some prov:Activity to an prov:Entity that it used. For
      example, :keynote prov:used :podium; prov:qualifiedUsage [ a prov:Usage; prov:entity
      :podium; :foo :bar ].@en
    description: Usage is the beginning of utilizing an entity by an activity. Before
      usage, the activity had not begun to utilize this entity and could not have
      been affected by the entity.@en
slots:
  actedOnBehalfOf:
    slot_uri: prov:actedOnBehalfOf
    range: Agent
    is_a: wasInfluencedBy
    comments:
    - An object property to express the accountability of an agent towards another
      agent. The subordinate agent acted on behalf of the responsible agent in an
      actual activity. @en
  activity:
    slot_uri: prov:activity
    range: Activity
    is_a: influencer
  agent:
    slot_uri: prov:agent
    range: Agent
    is_a: influencer
  alternateOf:
    slot_uri: prov:alternateOf
    range: Entity
    description: Two alternate entities present aspects of the same thing. These aspects
      may be the same or different, and the alternate entities may or may not overlap
      in time.@en
  atLocation:
    slot_uri: prov:atLocation
    range: Location
    comments:
    - The Location of any resource.@en
    - This property has multiple RDFS domains to suit multiple OWL Profiles. See <a
      href=\"#owl-profile\">PROV-O OWL Profile</a>.
  entity:
    slot_uri: prov:entity
    range: Entity
    is_a: influencer
  generated:
    slot_uri: prov:generated
    range: Entity
    is_a: influenced
  hadActivity:
    slot_uri: prov:hadActivity
    range: Activity
    comments:
    - The _optional_ Activity of an Influence, which used, generated, invalidated,
      or was the responsibility of some Entity. This property is _not_ used by ActivityInfluence
      (use prov:activity instead).@en
    - This property has multiple RDFS domains to suit multiple OWL Profiles. See <a
      href=\"#owl-profile\">PROV-O OWL Profile</a>.
  hadGeneration:
    slot_uri: prov:hadGeneration
    range: Generation
    comments:
    - The _optional_ Generation involved in an Entity's Derivation.@en
  hadMember:
    slot_uri: prov:hadMember
    range: Entity
    is_a: wasInfluencedBy
  hadPlan:
    slot_uri: prov:hadPlan
    range: Plan
    comments:
    - The _optional_ Plan adopted by an Agent in Association with some Activity. Plan
      specifications are out of the scope of this specification.@en
  hadPrimarySource:
    slot_uri: prov:hadPrimarySource
    range: Entity
    is_a: wasDerivedFrom
  hadRole:
    slot_uri: prov:hadRole
    range: Role
    comments:
    - The _optional_ Role that an Entity assumed in the context of an Activity. For
      example, :baking prov:used :spoon; prov:qualified [ a prov:Usage; prov:entity
      :spoon; prov:hadRole roles:mixing_implement ].@en
    - This property has multiple RDFS domains to suit multiple OWL Profiles. See <a
      href=\"#owl-profile\">PROV-O OWL Profile</a>.
  hadUsage:
    slot_uri: prov:hadUsage
    range: Usage
    comments:
    - The _optional_ Usage involved in an Entity's Derivation.@en
  influenced:
    slot_uri: prov:influenced
  influencer:
    slot_uri: prov:influencer
    range: Thing
    comments:
    - Subproperties of prov:influencer are used to cite the object of an unqualified
      PROV-O triple whose predicate is a subproperty of prov:wasInfluencedBy (e.g.
      prov:used, prov:wasGeneratedBy). prov:influencer is used much like rdf:object
      is used.@en
  invalidated:
    slot_uri: prov:invalidated
    range: Entity
    is_a: influenced
  qualifiedAssociation:
    slot_uri: prov:qualifiedAssociation
    range: Association
    is_a: qualifiedInfluence
    comments:
    - If this Activity prov:wasAssociatedWith Agent :ag, then it can qualify the Association
      using prov:qualifiedAssociation [ a prov:Association;  prov:agent :ag; :foo
      :bar ].@en
  qualifiedAttribution:
    slot_uri: prov:qualifiedAttribution
    range: Attribution
    is_a: qualifiedInfluence
    comments:
    - If this Entity prov:wasAttributedTo Agent :ag, then it can qualify how it was
      influenced using prov:qualifiedAttribution [ a prov:Attribution;  prov:agent
      :ag; :foo :bar ].@en
  qualifiedCommunication:
    slot_uri: prov:qualifiedCommunication
    range: Communication
    is_a: qualifiedInfluence
    comments:
    - If this Activity prov:wasInformedBy Activity :a, then it can qualify how it
      was influenced using prov:qualifiedCommunication [ a prov:Communication;  prov:activity
      :a; :foo :bar ].@en
  qualifiedDelegation:
    slot_uri: prov:qualifiedDelegation
    range: Delegation
    is_a: qualifiedInfluence
    comments:
    - If this Agent prov:actedOnBehalfOf Agent :ag, then it can qualify how with prov:qualifiedResponsibility
      [ a prov:Responsibility;  prov:agent :ag; :foo :bar ].@en
  qualifiedDerivation:
    slot_uri: prov:qualifiedDerivation
    range: Derivation
    is_a: qualifiedInfluence
    comments:
    - If this Entity prov:wasDerivedFrom Entity :e, then it can qualify how it was
      derived using prov:qualifiedDerivation [ a prov:Derivation;  prov:entity :e;
      :foo :bar ].@en
  qualifiedEnd:
    slot_uri: prov:qualifiedEnd
    range: End
    is_a: qualifiedInfluence
    comments:
    - If this Activity prov:wasEndedBy Entity :e1, then it can qualify how it was
      ended using prov:qualifiedEnd [ a prov:End;  prov:entity :e1; :foo :bar ].@en
  qualifiedGeneration:
    slot_uri: prov:qualifiedGeneration
    range: Generation
    is_a: qualifiedInfluence
    comments:
    - If this Activity prov:generated Entity :e, then it can qualify how it performed
      the Generation using prov:qualifiedGeneration [ a prov:Generation;  prov:entity
      :e; :foo :bar ].@en
  qualifiedInfluence:
    slot_uri: prov:qualifiedInfluence
    range: Influence
    comments:
    - Because prov:qualifiedInfluence is a broad relation, the more specific relations
      (qualifiedCommunication, qualifiedDelegation, qualifiedEnd, etc.) should be
      used when applicable.@en
  qualifiedInvalidation:
    slot_uri: prov:qualifiedInvalidation
    range: Invalidation
    is_a: qualifiedInfluence
    comments:
    - If this Entity prov:wasInvalidatedBy Activity :a, then it can qualify how it
      was invalidated using prov:qualifiedInvalidation [ a prov:Invalidation;  prov:activity
      :a; :foo :bar ].@en
  qualifiedPrimarySource:
    slot_uri: prov:qualifiedPrimarySource
    range: PrimarySource
    is_a: qualifiedInfluence
    comments:
    - If this Entity prov:hadPrimarySource Entity :e, then it can qualify how using
      prov:qualifiedPrimarySource [ a prov:PrimarySource; prov:entity :e; :foo :bar
      ].@en
  qualifiedQuotation:
    slot_uri: prov:qualifiedQuotation
    range: Quotation
    is_a: qualifiedInfluence
    comments:
    - If this Entity prov:wasQuotedFrom Entity :e, then it can qualify how using prov:qualifiedQuotation
      [ a prov:Quotation;  prov:entity :e; :foo :bar ].@en
  qualifiedRevision:
    slot_uri: prov:qualifiedRevision
    range: Revision
    is_a: qualifiedInfluence
    comments:
    - If this Entity prov:wasRevisionOf Entity :e, then it can qualify how it was
      revised using prov:qualifiedRevision [ a prov:Revision;  prov:entity :e; :foo
      :bar ].@en
  qualifiedStart:
    slot_uri: prov:qualifiedStart
    range: Start
    is_a: qualifiedInfluence
    comments:
    - If this Activity prov:wasStartedBy Entity :e1, then it can qualify how it was
      started using prov:qualifiedStart [ a prov:Start;  prov:entity :e1; :foo :bar
      ].@en
  qualifiedUsage:
    slot_uri: prov:qualifiedUsage
    range: Usage
    is_a: qualifiedInfluence
    comments:
    - If this Activity prov:used Entity :e, then it can qualify how it used it using
      prov:qualifiedUsage [ a prov:Usage; prov:entity :e; :foo :bar ].@en
  specializationOf:
    slot_uri: prov:specializationOf
    range: Entity
    is_a: alternateOf
    description: An entity that is a specialization of another shares all aspects
      of the latter, and additionally presents more specific aspects of the same thing
      as the latter. In particular, the lifetime of the entity being specialized contains
      that of any specialization. Examples of aspects include a time period, an abstraction,
      and a context associated with the entity.@en
  used:
    slot_uri: prov:used
    range: Entity
    is_a: wasInfluencedBy
    comments:
    - A prov:Entity that was used by this prov:Activity. For example, :baking prov:used
      :spoon, :egg, :oven .@en
  wasAssociatedWith:
    slot_uri: prov:wasAssociatedWith
    range: Agent
    is_a: wasInfluencedBy
    comments:
    - An prov:Agent that had some (unspecified) responsibility for the occurrence
      of this prov:Activity.@en
  wasAttributedTo:
    slot_uri: prov:wasAttributedTo
    range: Agent
    is_a: wasInfluencedBy
    comments:
    - Attribution is the ascribing of an entity to an agent.@en
    description: Attribution is the ascribing of an entity to an agent.@en
  wasDerivedFrom:
    slot_uri: prov:wasDerivedFrom
    range: Entity
    is_a: wasInfluencedBy
    comments:
    - The more specific subproperties of prov:wasDerivedFrom (i.e., prov:wasQuotedFrom,
      prov:wasRevisionOf, prov:hadPrimarySource) should be used when applicable.@en
    description: A derivation is a transformation of an entity into another, an update
      of an entity resulting in a new one, or the construction of a new entity based
      on a pre-existing entity.@en
  wasEndedBy:
    slot_uri: prov:wasEndedBy
    range: Entity
    is_a: wasInfluencedBy
    comments:
    - End is when an activity is deemed to have ended. An end may refer to an entity,
      known as trigger, that terminated the activity.@en
  wasGeneratedBy:
    slot_uri: prov:wasGeneratedBy
    range: Activity
    is_a: wasInfluencedBy
  wasInfluencedBy:
    slot_uri: prov:wasInfluencedBy
    comments:
    - Because prov:wasInfluencedBy is a broad relation, its more specific subproperties
      (e.g. prov:wasInformedBy, prov:actedOnBehalfOf, prov:wasEndedBy, etc.) should
      be used when applicable.@en
    - This property has multiple RDFS domains to suit multiple OWL Profiles. See <a
      href=\"#owl-profile\">PROV-O OWL Profile</a>.
  wasInformedBy:
    slot_uri: prov:wasInformedBy
    range: Activity
    is_a: wasInfluencedBy
    comments:
    - An activity a2 is dependent on or informed by another activity a1, by way of
      some unspecified entity that is generated by a1 and used by a2.@en
  wasInvalidatedBy:
    slot_uri: prov:wasInvalidatedBy
    range: Activity
    is_a: wasInfluencedBy
  wasQuotedFrom:
    slot_uri: prov:wasQuotedFrom
    range: Entity
    is_a: wasDerivedFrom
    comments:
    - An entity is derived from an original entity by copying, or 'quoting', some
      or all of it.@en
  wasRevisionOf:
    slot_uri: prov:wasRevisionOf
    range: Entity
    is_a: wasDerivedFrom
    comments:
    - A revision is a derivation that revises an entity into a revised version.@en
  wasStartedBy:
    slot_uri: prov:wasStartedBy
    range: Entity
    is_a: wasInfluencedBy
    comments:
    - Start is when an activity is deemed to have started. A start may refer to an
      entity, known as trigger, that initiated the activity.@en
  atTime:
    slot_uri: prov:atTime
    comments:
    - The time at which an InstantaneousEvent occurred, in the form of xsd:dateTime.@en
  endedAtTime:
    slot_uri: prov:endedAtTime
    comments:
    - The time at which an activity ended. See also prov:startedAtTime.@en
  generatedAtTime:
    slot_uri: prov:generatedAtTime
    comments:
    - The time at which an entity was completely created and is available for use.@en
  invalidatedAtTime:
    slot_uri: prov:invalidatedAtTime
    comments:
    - The time at which an entity was invalidated (i.e., no longer usable).@en
  startedAtTime:
    slot_uri: prov:startedAtTime
    comments:
    - The time at which an activity started. See also prov:endedAtTime.@en
  value:
    slot_uri: prov:value
    description: Provides a value that is a direct representation of an entity.@en
  comment:
    slot_uri: rdfs:comment
    comments:
    - '@en'
  isDefinedBy:
    slot_uri: rdfs:isDefinedBy
  label:
    slot_uri: rdfs:label
    comments:
    - '@en'
  seeAlso:
    slot_uri: rdfs:seeAlso
    comments:
    - '@en'
  versionInfo:
    slot_uri: owl:versionInfo
  aq:
    slot_uri: prov:aq
    is_a: seeAlso
  category:
    slot_uri: prov:category
    comments:
    - Classify prov-o terms into three categories, including 'starting-point', 'qualifed',
      and 'extended'. This classification is used by the prov-o html document to gently
      introduce prov-o terms to its users. @en
  component:
    slot_uri: prov:component
    comments:
    - Classify prov-o terms into six components according to prov-dm, including 'agents-responsibility',
      'alternate', 'annotations', 'collections', 'derivations', and 'entities-activities'.
      This classification is used so that readers of prov-o specification can find
      its correspondence with the prov-dm specification.@en
  constraints:
    slot_uri: prov:constraints
    is_a: seeAlso
    comments:
    - A reference to the principal section of the PROV-CONSTRAINTS document that describes
      this concept.@en
  definition:
    slot_uri: prov:definition
    comments:
    - A definition quoted from PROV-DM or PROV-CONSTRAINTS that describes the concept
      expressed with this OWL term.@en
  dm:
    slot_uri: prov:dm
    is_a: seeAlso
    comments:
    - A reference to the principal section of the PROV-DM document that describes
      this concept.@en
  editorialNote:
    slot_uri: prov:editorialNote
    comments:
    - A note by the OWL development team about how this term expresses the PROV-DM
      concept, or how it should be used in context of semantic web or linked data.@en
  editorsDefinition:
    slot_uri: prov:editorsDefinition
    is_a: definition
    comments:
    - When the prov-o term does not have a definition drawn from prov-dm, and the
      prov-o editor provides one.@en
  inverse:
    slot_uri: prov:inverse
    comments:
    - PROV-O does not define all property inverses. The directionalities defined in
      PROV-O should be given preference over those not defined. However, if users
      wish to name the inverse of a PROV-O property, the local name given by prov:inverse
      should be used.@en
  n:
    slot_uri: prov:n
    is_a: seeAlso
    comments:
    - A reference to the principal section of the PROV-DM document that describes
      this concept.@en
  order:
    slot_uri: prov:order
    comments:
    - The position that this OWL term should be listed within documentation. The scope
      of the documentation (e.g., among all terms, among terms within a prov:category,
      among properties applying to a particular class, etc.) is unspecified.@en
  qualifiedForm:
    slot_uri: prov:qualifiedForm
    is_a: seeAlso
    comments:
    - "This annotation property links a subproperty of prov:wasInfluencedBy with the\
      \ subclass of prov:Influence and the qualifying property that are used to qualify\
      \ it. \n\nExample annotation:\n\n    prov:wasGeneratedBy prov:qualifiedForm\
      \ prov:qualifiedGeneration, prov:Generation .\n\nThen this unqualified assertion:\n\
      \n    :entity1 prov:wasGeneratedBy :activity1 .\n\ncan be qualified by adding:\n\
      \n   :entity1 prov:qualifiedGeneration :entity1Gen .\n   :entity1Gen \n    \
      \   a prov:Generation, prov:Influence;\n       prov:activity :activity1;\n \
      \      :customValue 1337 .\n\nNote how the value of the unqualified influence\
      \ (prov:wasGeneratedBy :activity1) is mirrored as the value of the prov:activity\
      \ (or prov:entity, or prov:agent) property on the influence class.@en"
  sharesDefinitionWith:
    slot_uri: prov:sharesDefinitionWith
    is_a: seeAlso
  todo:
    slot_uri: prov:todo
  unqualifiedForm:
    slot_uri: prov:unqualifiedForm
    is_a: seeAlso
    comments:
    - Classes and properties used to qualify relationships are annotated with prov:unqualifiedForm
      to indicate the property used to assert an unqualified provenance relation.@en
enums: {}
