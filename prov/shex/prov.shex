BASE <https://w3id.org/linkml/prov/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX linkml: <https://w3id.org/linkml/>
PREFIX prov: <http://www.w3.org/ns/prov#>
PREFIX owl: <http://example.org/UNKNOWN/owl/>


linkml:String xsd:string

linkml:Integer xsd:integer

linkml:Boolean xsd:boolean

linkml:Float xsd:float

linkml:Double xsd:double

linkml:Decimal xsd:decimal

linkml:Time xsd:dateTime

linkml:Date xsd:date

linkml:Datetime xsd:dateTime

linkml:Uriorcurie IRI

linkml:Uri IRI

linkml:Ncname xsd:string

linkml:Objectidentifier IRI

linkml:Nodeidentifier NONLITERAL

<Activity> CLOSED {
    (  $<Activity_tes> (  prov:atLocation @<Location> ? ;
          prov:generated @<Entity> ? ;
          prov:invalidated @<Entity> ? ;
          prov:qualifiedAssociation @<Association> ? ;
          prov:qualifiedCommunication @<Communication> ? ;
          prov:qualifiedEnd @<End> ? ;
          prov:qualifiedInfluence @<Influence> ? ;
          prov:qualifiedStart @<Start> ? ;
          prov:qualifiedUsage @<Usage> ? ;
          prov:used @<Entity> ? ;
          prov:wasAssociatedWith @<Agent> ? ;
          prov:wasEndedBy @<Entity> ? ;
          prov:wasInfluencedBy @linkml:String ? ;
          prov:wasInformedBy @<Activity> ? ;
          prov:wasStartedBy @<Entity> ? ;
          prov:endedAtTime @linkml:String ? ;
          prov:startedAtTime @linkml:String ?
       ) ;
       rdf:type [ prov:Activity ] ?
    )
}

<ActivityInfluence>  (
    CLOSED {
       (  $<ActivityInfluence_tes> (  &<Influence_tes> ;
             rdf:type [ prov:Influence ] ? ;
             prov:activity @<Activity> ?
          ) ;
          rdf:type [ prov:ActivityInfluence ] ?
       )
    } OR @<Communication>
)

<Agent>  (
    CLOSED {
       (  $<Agent_tes> (  prov:actedOnBehalfOf @<Agent> ? ;
             prov:atLocation @<Location> ? ;
             prov:qualifiedDelegation @<Delegation> ? ;
             prov:qualifiedInfluence @<Influence> ? ;
             prov:wasInfluencedBy @linkml:String ?
          ) ;
          rdf:type [ prov:Agent ] ?
       )
    } OR @<Organization> OR @<Person> OR @<SoftwareAgent>
)

<AgentInfluence>  (
    CLOSED {
       (  $<AgentInfluence_tes> (  &<Influence_tes> ;
             rdf:type [ prov:Influence ] ? ;
             prov:agent @<Agent> ?
          ) ;
          rdf:type [ prov:AgentInfluence ] ?
       )
    } OR @<Association> OR @<Attribution> OR @<Delegation>
)

<Association> CLOSED {
    (  $<Association_tes> (  &<AgentInfluence_tes> ;
          rdf:type [ prov:AgentInfluence ] ? ;
          prov:hadPlan @<Plan> ?
       ) ;
       rdf:type [ prov:Association ] ?
    )
}

<Attribution> CLOSED {
    (  $<Attribution_tes> (  &<AgentInfluence_tes> ;
          rdf:type [ prov:AgentInfluence ] ?
       ) ;
       rdf:type [ prov:Attribution ] ?
    )
}

<Bundle> CLOSED {
    (  $<Bundle_tes> (  &<Entity_tes> ;
          rdf:type [ prov:Entity ] ?
       ) ;
       rdf:type [ prov:Bundle ] ?
    )
}

<Collection>  (
    CLOSED {
       (  $<Collection_tes> (  &<Entity_tes> ;
             rdf:type [ prov:Entity ] ? ;
             prov:hadMember @<Entity> ?
          ) ;
          rdf:type [ prov:Collection ] ?
       )
    } OR @<EmptyCollection>
)

<Communication> CLOSED {
    (  $<Communication_tes> (  &<ActivityInfluence_tes> ;
          rdf:type [ prov:ActivityInfluence ] ?
       ) ;
       rdf:type [ prov:Communication ] ?
    )
}

<Delegation> CLOSED {
    (  $<Delegation_tes> (  &<AgentInfluence_tes> ;
          rdf:type [ prov:AgentInfluence ] ?
       ) ;
       rdf:type [ prov:Delegation ] ?
    )
}

<Derivation>  (
    CLOSED {
       (  $<Derivation_tes> (  &<EntityInfluence_tes> ;
             rdf:type [ prov:EntityInfluence ] ? ;
             prov:hadGeneration @<Generation> ? ;
             prov:hadUsage @<Usage> ?
          ) ;
          rdf:type [ prov:Derivation ] ?
       )
    } OR @<PrimarySource> OR @<Quotation> OR @<Revision>
)

<EmptyCollection> CLOSED {
    (  $<EmptyCollection_tes> (  &<Collection_tes> ;
          rdf:type [ prov:Collection ] ?
       ) ;
       rdf:type [ prov:EmptyCollection ] ?
    )
}

<End> CLOSED {
    (  $<End_tes> (  &<InstantaneousEvent_tes> ;
          rdf:type [ prov:InstantaneousEvent ] ? ;
          &<EntityInfluence_tes> ;
          rdf:type [ prov:EntityInfluence ] ? ;
          prov:hadActivity @<Activity> ? ;
          prov:influencer @<Thing> ? ;
          prov:entity @<Entity> ?
       ) ;
       rdf:type [ prov:End ] ?
    )
}

<Entity>  (
    CLOSED {
       (  $<Entity_tes> (  prov:alternateOf @<Entity> ? ;
             prov:atLocation @<Location> ? ;
             prov:hadPrimarySource @<Entity> ? ;
             prov:qualifiedAttribution @<Attribution> ? ;
             prov:qualifiedDerivation @<Derivation> ? ;
             prov:qualifiedGeneration @<Generation> ? ;
             prov:qualifiedInfluence @<Influence> ? ;
             prov:qualifiedInvalidation @<Invalidation> ? ;
             prov:qualifiedPrimarySource @<PrimarySource> ? ;
             prov:qualifiedQuotation @<Quotation> ? ;
             prov:qualifiedRevision @<Revision> ? ;
             prov:specializationOf @<Entity> ? ;
             prov:wasAttributedTo @<Agent> ? ;
             prov:wasDerivedFrom @<Entity> ? ;
             prov:wasGeneratedBy @<Activity> ? ;
             prov:wasInfluencedBy @linkml:String ? ;
             prov:wasInvalidatedBy @<Activity> ? ;
             prov:wasQuotedFrom @<Entity> ? ;
             prov:wasRevisionOf @<Entity> ? ;
             prov:generatedAtTime @linkml:String ? ;
             prov:invalidatedAtTime @linkml:String ? ;
             prov:value @linkml:String ?
          ) ;
          rdf:type [ prov:Entity ] ?
       )
    } OR @<Bundle> OR @<Collection> OR @<Plan>
)

<EntityInfluence>  (
    CLOSED {
       (  $<EntityInfluence_tes> (  &<Influence_tes> ;
             rdf:type [ prov:Influence ] ? ;
             prov:entity @<Entity> ?
          ) ;
          rdf:type [ prov:EntityInfluence ] ?
       )
    } OR @<Derivation>
)

<Generation> CLOSED {
    (  $<Generation_tes> (  &<InstantaneousEvent_tes> ;
          rdf:type [ prov:InstantaneousEvent ] ? ;
          &<ActivityInfluence_tes> ;
          rdf:type [ prov:ActivityInfluence ] ? ;
          prov:hadActivity @<Activity> ? ;
          prov:influencer @<Thing> ? ;
          prov:activity @<Activity> ?
       ) ;
       rdf:type [ prov:Generation ] ?
    )
}

<Influence>  (
    CLOSED {
       (  $<Influence_tes> (  prov:hadActivity @<Activity> ? ;
             prov:hadRole @<Role> ? ;
             prov:influencer @<Thing> ?
          ) ;
          rdf:type [ prov:Influence ] ?
       )
    } OR @<ActivityInfluence> OR @<AgentInfluence> OR @<EntityInfluence>
)

<InstantaneousEvent>  (
    CLOSED {
       (  $<InstantaneousEvent_tes> (  prov:atLocation @<Location> ? ;
             prov:hadRole @<Role> ? ;
             prov:atTime @linkml:String ?
          ) ;
          rdf:type [ prov:InstantaneousEvent ] ?
       )
    } OR @<End> OR @<Generation> OR @<Invalidation> OR @<Start> OR @<Usage>
)

<Invalidation> CLOSED {
    (  $<Invalidation_tes> (  &<InstantaneousEvent_tes> ;
          rdf:type [ prov:InstantaneousEvent ] ? ;
          &<ActivityInfluence_tes> ;
          rdf:type [ prov:ActivityInfluence ] ? ;
          prov:hadActivity @<Activity> ? ;
          prov:influencer @<Thing> ? ;
          prov:activity @<Activity> ?
       ) ;
       rdf:type [ prov:Invalidation ] ?
    )
}

<Location> CLOSED {
    (  $<Location_tes> rdf:type . * ;
       rdf:type [ prov:Location ] ?
    )
}

<Organization> CLOSED {
    (  $<Organization_tes> (  &<Agent_tes> ;
          rdf:type [ prov:Agent ] ?
       ) ;
       rdf:type [ prov:Organization ] ?
    )
}

<Person> CLOSED {
    (  $<Person_tes> (  &<Agent_tes> ;
          rdf:type [ prov:Agent ] ?
       ) ;
       rdf:type [ prov:Person ] ?
    )
}

<Plan> CLOSED {
    (  $<Plan_tes> (  &<Entity_tes> ;
          rdf:type [ prov:Entity ] ?
       ) ;
       rdf:type [ prov:Plan ] ?
    )
}

<PrimarySource> CLOSED {
    (  $<PrimarySource_tes> (  &<Derivation_tes> ;
          rdf:type [ prov:Derivation ] ?
       ) ;
       rdf:type [ prov:PrimarySource ] ?
    )
}

<Quotation> CLOSED {
    (  $<Quotation_tes> (  &<Derivation_tes> ;
          rdf:type [ prov:Derivation ] ?
       ) ;
       rdf:type [ prov:Quotation ] ?
    )
}

<Revision> CLOSED {
    (  $<Revision_tes> (  &<Derivation_tes> ;
          rdf:type [ prov:Derivation ] ?
       ) ;
       rdf:type [ prov:Revision ] ?
    )
}

<Role> CLOSED {
    (  $<Role_tes> rdf:type . * ;
       rdf:type [ prov:Role ] ?
    )
}

<SoftwareAgent> CLOSED {
    (  $<SoftwareAgent_tes> (  &<Agent_tes> ;
          rdf:type [ prov:Agent ] ?
       ) ;
       rdf:type [ prov:SoftwareAgent ] ?
    )
}

<Start> CLOSED {
    (  $<Start_tes> (  &<InstantaneousEvent_tes> ;
          rdf:type [ prov:InstantaneousEvent ] ? ;
          &<EntityInfluence_tes> ;
          rdf:type [ prov:EntityInfluence ] ? ;
          prov:hadActivity @<Activity> ? ;
          prov:influencer @<Thing> ? ;
          prov:entity @<Entity> ?
       ) ;
       rdf:type [ prov:Start ] ?
    )
}

<Thing> CLOSED {
    (  $<Thing_tes> rdf:type . * ;
       rdf:type [ owl:Thing ] ?
    )
}

<Usage> CLOSED {
    (  $<Usage_tes> (  &<InstantaneousEvent_tes> ;
          rdf:type [ prov:InstantaneousEvent ] ? ;
          &<EntityInfluence_tes> ;
          rdf:type [ prov:EntityInfluence ] ? ;
          prov:hadActivity @<Activity> ? ;
          prov:influencer @<Thing> ? ;
          prov:entity @<Entity> ?
       ) ;
       rdf:type [ prov:Usage ] ?
    )
}



